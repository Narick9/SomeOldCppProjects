/*
 * =====================================================================================
 *
 *       Filename:  8.7_iterator.cpp
 *
 *    Description:  demonstrates using of vector iterators 
 *
 *        Version:  1.0
 *        Created:  06/30/2020 06:23:21 PM
 *       Revision:  none
 *       Compiler:  g++
 *
 *         Author:  Artur
 *   Organization:  
 *
 * =====================================================================================
 */
#include <iostream>
#include <cstdlib>
#include <vector>
using namespace std;


int main()
{
   srand(24);

   int size;
   cout << "size: ";
   cin >> size;

   vector<char> symbs(size, 'a');   // 'a' - второй параметр конструктора - это
                                    //   значение по умолчанию для элементов
   vector<char>::iterator it;
         // iterator - это .. итератор. Всем своим функционалом он смахивает
         //   на указатель, но сам по себе - это внутренний класс объекта
         //   vector. В других контейнерных классах стандартной библиотеки тоже
         //   есть свои внутренние итераторы с тем же интерфейсом. Это значит,
         //   что ты можешь пользоваться всеми ими одними командами, не думаю
         //   об их особенностях. Например, у класса list нет оператора [], как
         //   у valarray и vector
   for (it = symbs.begin(); it != symbs.end(); it++) {
      *it += rand() % 26;  // begin() - этот метод выдаёт итератор, указывающий
      cout << *it << " ";  //   на первый элемент массива vector
   } cout << endl;         // end() - выдаёт итератор, указывающий на место
                           //   сразу за массивом. Т.е. пока it здесь указывает
   return 0;               //   на что-то в массиве, цикл идёт, но как только
}                          //   он перейдёт край, условие станет false
                           // ++ - этот оператор передвигает указатель на адрес
                           //   следующего элемента
                           // * - за этим тоже сидит оператор. Смысл тот же,
                           //   что и у указателей - дать доступ к объекту
